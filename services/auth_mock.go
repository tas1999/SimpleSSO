// Code generated by MockGen. DO NOT EDIT.
// Source: services\auth_service.go

// Package mock_services is a generated GoMock package.
package services

import (
	repository "github.com/tas1999/SimpleSSO/repository"
	reflect "reflect"

	jwt "github.com/dgrijalva/jwt-go/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockCrypt is a mock of Crypt interface.
type MockCrypt struct {
	ctrl     *gomock.Controller
	recorder *MockCryptMockRecorder
}

// MockCryptMockRecorder is the mock recorder for MockCrypt.
type MockCryptMockRecorder struct {
	mock *MockCrypt
}

// NewMockCrypt creates a new mock instance.
func NewMockCrypt(ctrl *gomock.Controller) *MockCrypt {
	mock := &MockCrypt{ctrl: ctrl}
	mock.recorder = &MockCryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypt) EXPECT() *MockCryptMockRecorder {
	return m.recorder
}

// GenerateSecureToken mocks base method.
func (m *MockCrypt) GenerateSecureToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecureToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSecureToken indicates an expected call of GenerateSecureToken.
func (mr *MockCryptMockRecorder) GenerateSecureToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecureToken", reflect.TypeOf((*MockCrypt)(nil).GenerateSecureToken))
}

// GetHash mocks base method.
func (m *MockCrypt) GetHash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockCryptMockRecorder) GetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockCrypt)(nil).GetHash), arg0)
}

// GetJwt mocks base method.
func (m *MockCrypt) GetJwt(arg0 jwt.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJwt indicates an expected call of GetJwt.
func (mr *MockCryptMockRecorder) GetJwt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwt", reflect.TypeOf((*MockCrypt)(nil).GetJwt), arg0)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetRefreshToken mocks base method.
func (m *MockRepository) GetRefreshToken(token string) (*repository.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", token)
	ret0, _ := ret[0].(*repository.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockRepositoryMockRecorder) GetRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockRepository)(nil).GetRefreshToken), token)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(login string) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), login)
}

// GetUserById mocks base method.
func (m *MockRepository) GetUserById(Id int) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", Id)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockRepositoryMockRecorder) GetUserById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepository)(nil).GetUserById), Id)
}

// SetRefreshToken mocks base method.
func (m *MockRepository) SetRefreshToken(token repository.RefreshToken) (*repository.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshToken", token)
	ret0, _ := ret[0].(*repository.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockRepositoryMockRecorder) SetRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockRepository)(nil).SetRefreshToken), token)
}

// SetUser mocks base method.
func (m *MockRepository) SetUser(user repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", user)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockRepositoryMockRecorder) SetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockRepository)(nil).SetUser), user)
}
